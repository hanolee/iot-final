{"ast":null,"code":"import axios from 'axios';\nexport let Methods = /*#__PURE__*/function (Methods) {\n  Methods[\"GET\"] = \"GET\";\n  Methods[\"POST\"] = \"POST\";\n  Methods[\"PUT\"] = \"PUT\";\n  Methods[\"DELETE\"] = \"DELETE\";\n  Methods[\"PATCH\"] = \"PATCH\";\n  return Methods;\n}({});\nconst client = axios.create({\n  baseURL: process.env.REACT_APP_SERVER_ENDPOINT,\n  timeout: 100 * 1000 // 단위 ms\n});\nexport const accessToken = localStorage.getItem('drat');\nexport const refreshToken = localStorage.getItem('drrt');\nconst onRequestConfigClient = async config => {\n  //config.headers['User-Agent'] = process.env.USER_AGENT || ''\n  console.log('request config :', config);\n  return config;\n};\nconst onRequestError = error => Promise.reject(error);\nclient.interceptors.request.use(onRequestConfigClient, onRequestError);\n\n// const onResponseSuccess = (config: AxiosResponse) => config.data\nconst onResponseSuccess = config => config.data;\nconst onResponseerror = error => Promise.reject(error);\nclient.interceptors.response.use(onResponseSuccess, onResponseerror);\nexport const request = options => client.request(options);\nexport function isError(payload) {\n  return axios.isAxiosError(payload);\n}","map":{"version":3,"names":["axios","Methods","client","create","baseURL","process","env","REACT_APP_SERVER_ENDPOINT","timeout","accessToken","localStorage","getItem","refreshToken","onRequestConfigClient","config","console","log","onRequestError","error","Promise","reject","interceptors","request","use","onResponseSuccess","data","onResponseerror","response","options","isError","payload","isAxiosError"],"sources":["/Users/hano/dev/daru/daru-admin/src/libs/request.ts"],"sourcesContent":["import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'\n\nexport enum Methods {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH'\n}\n\nconst client = axios.create({\n  baseURL: process.env.REACT_APP_SERVER_ENDPOINT,\n  timeout: 100 * 1000 // 단위 ms\n})\nexport const accessToken = localStorage.getItem('drat')\nexport const refreshToken = localStorage.getItem('drrt')\n\nconst onRequestConfigClient = async (config: AxiosRequestConfig) => {\n  //config.headers['User-Agent'] = process.env.USER_AGENT || ''\n  console.log('request config :', config)\n  return config\n}\nconst onRequestError = (error: AxiosError) => Promise.reject(error)\nclient.interceptors.request.use(onRequestConfigClient, onRequestError)\n\n// const onResponseSuccess = (config: AxiosResponse) => config.data\nconst onResponseSuccess = (config: AxiosResponse) => config.data\nconst onResponseerror = (error: AxiosError) => Promise.reject(error)\nclient.interceptors.response.use(onResponseSuccess, onResponseerror)\n\nexport const request = <T>(options: AxiosRequestConfig): Promise<T> => client.request(options)\n\nexport function isError(payload: any): payload is AxiosError<{ message: string; code: string }>{\n  return axios.isAxiosError(payload)\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAyD,OAAO;AAE5E,WAAYC,OAAO,0BAAPA,OAAO;EAAPA,OAAO;EAAPA,OAAO;EAAPA,OAAO;EAAPA,OAAO;EAAPA,OAAO;EAAA,OAAPA,OAAO;AAAA;AAQnB,MAAMC,MAAM,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC1BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,yBAAyB;EAC9CC,OAAO,EAAE,GAAG,GAAG,IAAI,CAAC;AACtB,CAAC,CAAC;AACF,OAAO,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;AACvD,OAAO,MAAMC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;AAExD,MAAME,qBAAqB,GAAG,MAAOC,MAA0B,IAAK;EAClE;EACAC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,MAAM,CAAC;EACvC,OAAOA,MAAM;AACf,CAAC;AACD,MAAMG,cAAc,GAAIC,KAAiB,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AACnEhB,MAAM,CAACmB,YAAY,CAACC,OAAO,CAACC,GAAG,CAACV,qBAAqB,EAAEI,cAAc,CAAC;;AAEtE;AACA,MAAMO,iBAAiB,GAAIV,MAAqB,IAAKA,MAAM,CAACW,IAAI;AAChE,MAAMC,eAAe,GAAIR,KAAiB,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AACpEhB,MAAM,CAACmB,YAAY,CAACM,QAAQ,CAACJ,GAAG,CAACC,iBAAiB,EAAEE,eAAe,CAAC;AAEpE,OAAO,MAAMJ,OAAO,GAAOM,OAA2B,IAAiB1B,MAAM,CAACoB,OAAO,CAACM,OAAO,CAAC;AAE9F,OAAO,SAASC,OAAOA,CAACC,OAAY,EAA2D;EAC7F,OAAO9B,KAAK,CAAC+B,YAAY,CAACD,OAAO,CAAC;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
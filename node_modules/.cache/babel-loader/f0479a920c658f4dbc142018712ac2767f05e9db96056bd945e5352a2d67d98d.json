{"ast":null,"code":"import axios from'axios';export let Methods=/*#__PURE__*/function(Methods){Methods[\"GET\"]=\"GET\";Methods[\"POST\"]=\"POST\";Methods[\"PUT\"]=\"PUT\";Methods[\"DELETE\"]=\"DELETE\";Methods[\"PATCH\"]=\"PATCH\";return Methods;}({});const client=axios.create({baseURL:process.env.REACT_APP_SERVER_ENDPOINT,timeout:100*1000// 단위 ms\n});export const accessToken=localStorage.getItem('drat');export const refreshToken=localStorage.getItem('drrt');const onRequestConfigClient=async config=>{//config.headers['User-Agent'] = process.env.USER_AGENT || ''\nreturn config;};const onRequestError=error=>Promise.reject(error);client.interceptors.request.use(onRequestConfigClient,onRequestError);// const onResponseSuccess = (config: AxiosResponse) => config.data\nconst onResponseSuccess=config=>config.data;const onResponseerror=error=>Promise.reject(error);client.interceptors.response.use(onResponseSuccess,onResponseerror);export const request=options=>client.request(options);export function isError(payload){return axios.isAxiosError(payload);}","map":{"version":3,"names":["axios","Methods","client","create","baseURL","process","env","REACT_APP_SERVER_ENDPOINT","timeout","accessToken","localStorage","getItem","refreshToken","onRequestConfigClient","config","onRequestError","error","Promise","reject","interceptors","request","use","onResponseSuccess","data","onResponseerror","response","options","isError","payload","isAxiosError"],"sources":["/Users/hano/dev/snu/iot/iot-final/src/libs/request.ts"],"sourcesContent":["import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'\n\nexport enum Methods {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH'\n}\n\nconst client = axios.create({\n  baseURL: process.env.REACT_APP_SERVER_ENDPOINT,\n  timeout: 100 * 1000 // 단위 ms\n})\nexport const accessToken = localStorage.getItem('drat')\nexport const refreshToken = localStorage.getItem('drrt')\n\nconst onRequestConfigClient = async (config: AxiosRequestConfig) => {\n  //config.headers['User-Agent'] = process.env.USER_AGENT || ''\n  return config\n}\nconst onRequestError = (error: AxiosError) => Promise.reject(error)\nclient.interceptors.request.use(onRequestConfigClient, onRequestError)\n\n// const onResponseSuccess = (config: AxiosResponse) => config.data\nconst onResponseSuccess = (config: AxiosResponse) => config.data\nconst onResponseerror = (error: AxiosError) => Promise.reject(error)\nclient.interceptors.response.use(onResponseSuccess, onResponseerror)\n\nexport const request = <T>(options: AxiosRequestConfig): Promise<T> => client.request(options)\n\nexport function isError(payload: any): payload is AxiosError<{ message: string; code: string }>{\n  return axios.isAxiosError(payload)\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAyD,OAAO,CAE5E,UAAY,CAAAC,OAAO,uBAAPA,OAAO,EAAPA,OAAO,cAAPA,OAAO,gBAAPA,OAAO,cAAPA,OAAO,oBAAPA,OAAO,wBAAP,CAAAA,OAAO,OAQnB,KAAM,CAAAC,MAAM,CAAGF,KAAK,CAACG,MAAM,CAAC,CAC1BC,OAAO,CAAEC,OAAO,CAACC,GAAG,CAACC,yBAAyB,CAC9CC,OAAO,CAAE,GAAG,CAAG,IAAK;AACtB,CAAC,CAAC,CACF,MAAO,MAAM,CAAAC,WAAW,CAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CACvD,MAAO,MAAM,CAAAC,YAAY,CAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAExD,KAAM,CAAAE,qBAAqB,CAAG,KAAO,CAAAC,MAA0B,EAAK,CAClE;AACA,MAAO,CAAAA,MAAM,CACf,CAAC,CACD,KAAM,CAAAC,cAAc,CAAIC,KAAiB,EAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CACnEd,MAAM,CAACiB,YAAY,CAACC,OAAO,CAACC,GAAG,CAACR,qBAAqB,CAAEE,cAAc,CAAC,CAEtE;AACA,KAAM,CAAAO,iBAAiB,CAAIR,MAAqB,EAAKA,MAAM,CAACS,IAAI,CAChE,KAAM,CAAAC,eAAe,CAAIR,KAAiB,EAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CACpEd,MAAM,CAACiB,YAAY,CAACM,QAAQ,CAACJ,GAAG,CAACC,iBAAiB,CAAEE,eAAe,CAAC,CAEpE,MAAO,MAAM,CAAAJ,OAAO,CAAOM,OAA2B,EAAiBxB,MAAM,CAACkB,OAAO,CAACM,OAAO,CAAC,CAE9F,MAAO,SAAS,CAAAC,OAAOA,CAACC,OAAY,CAA2D,CAC7F,MAAO,CAAA5B,KAAK,CAAC6B,YAAY,CAACD,OAAO,CAAC,CACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
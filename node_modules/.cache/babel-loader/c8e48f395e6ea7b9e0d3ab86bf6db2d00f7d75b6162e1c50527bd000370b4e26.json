{"ast":null,"code":"export const storeAccessToken=accessToken=>{localStorage.setItem('drat',accessToken);};export const storeRefreshToken=refreshToken=>{localStorage.setItem('drrt',refreshToken);};export const getAccessToken=()=>{const token=localStorage.getItem('drat')||'default';return token;};export const getRefreshToken=()=>{const token=localStorage.getItem('drrt')||'default';return token;};export const isUserLoggedIn=()=>{const token=getAccessToken();const length=token.length>30;return!!token&&length;// token이 존재하면 true, 아니면 false 반환\n};const decodeJWT=accessToken=>{if(!accessToken){return null;}const tokenParts=accessToken.split('.');if(tokenParts.length!==3){throw new Error('Invalid JWT');}const encodedPayload=tokenParts[1];const decodedPayload=atob(encodedPayload);const payload=JSON.parse(decodedPayload);return payload;};export const getPhoneNumberHashed=()=>{const at=getAccessToken();return decodeJWT(at);};const extractExpirationTime=accessToken=>{try{const payload=decodeJWT(accessToken);if(payload&&payload.exp){return payload.exp;}}catch(error){console.error('Error decoding JWT:',error);}return null;};export const validateToken=token=>{const expiredtime=extractExpirationTime(token);const currenttime=Date.now()/1000;if(expiredtime)return currenttime<expiredtime;else return false;};export const validateCurrentAccessToken=()=>{const at=getAccessToken();return validateToken(at);};export const validateCurrentRefreshToken=()=>{const rt=getRefreshToken();return validateToken(rt);};","map":{"version":3,"names":["storeAccessToken","accessToken","localStorage","setItem","storeRefreshToken","refreshToken","getAccessToken","token","getItem","getRefreshToken","isUserLoggedIn","length","decodeJWT","tokenParts","split","Error","encodedPayload","decodedPayload","atob","payload","JSON","parse","getPhoneNumberHashed","at","extractExpirationTime","exp","error","console","validateToken","expiredtime","currenttime","Date","now","validateCurrentAccessToken","validateCurrentRefreshToken","rt"],"sources":["/Users/hano/dev/daru/daru-admin/src/utils/jwt.ts"],"sourcesContent":["interface JWTTokenPayload {\n  exp: number;\n}\n\nexport const storeAccessToken = (accessToken: string) => {\n  localStorage.setItem('drat', accessToken)\n}\nexport const storeRefreshToken = (refreshToken: string) => {\n  localStorage.setItem('drrt', refreshToken)\n}\nexport const getAccessToken = () => {\n  const token = localStorage.getItem('drat') || 'default'\n  return token\n}\nexport const getRefreshToken = () => {\n  const token = localStorage.getItem('drrt') || 'default'\n  return token\n}\nexport const isUserLoggedIn = (): boolean => {\n  const token = getAccessToken()\n  const length = token.length > 30\n  return !!token && length // token이 존재하면 true, 아니면 false 반환\n}\nconst decodeJWT = (accessToken: string): JWTTokenPayload | null => {\n  if (!accessToken) {\n    return null\n  }\n  const tokenParts = accessToken.split('.')\n  if (tokenParts.length !== 3) {\n    throw new Error('Invalid JWT')\n  }\n\n  const encodedPayload = tokenParts[1]\n  const decodedPayload = atob(encodedPayload)\n\n  const payload: JWTTokenPayload = JSON.parse(decodedPayload)\n  return payload\n}\nexport const getPhoneNumberHashed = () => {\n  const at = getAccessToken()\n  return decodeJWT(at)\n}\n\nconst extractExpirationTime = (accessToken: string): number | null => {\n  try {\n    const payload = decodeJWT(accessToken)\n    if (payload && payload.exp) {\n      return payload.exp\n    }\n  } catch (error) {\n    console.error('Error decoding JWT:', error)\n  }\n\n  return null\n}\n\nexport const validateToken = (token: string) => {\n  const expiredtime = extractExpirationTime(token)\n  const currenttime = Date.now() / 1000\n  if (expiredtime)\n    return currenttime < expiredtime\n  else\n    return false\n}\nexport const validateCurrentAccessToken = () => {\n  const at = getAccessToken()\n  return validateToken(at)\n}\nexport const validateCurrentRefreshToken = () => {\n  const rt = getRefreshToken()\n  return validateToken(rt)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
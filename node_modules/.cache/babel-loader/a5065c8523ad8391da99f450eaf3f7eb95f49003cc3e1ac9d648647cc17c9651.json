{"ast":null,"code":"export default function timeSince(createdAt) {\n  const now = new Date();\n  const createdDate = new Date(createdAt);\n  const seconds = Math.floor((now.getTime() - createdDate.getTime()) / 1000);\n  const minute = 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  //const month = day * 30 // 간략하게 한 달을 30일로 간주합니다.\n\n  if (seconds < minute) {\n    return '방금 전';\n  } else if (seconds < hour) {\n    return `${Math.floor(seconds / minute)}분 전`;\n  } else if (seconds < day) {\n    return `${Math.floor(seconds / hour)}시간 전`;\n  } else if (seconds < day * 2) {\n    return '1일 전';\n  } else if (seconds < day * 3) {\n    return '2일 전';\n  } else {\n    return `${createdDate.getMonth() + 1}/${createdDate.getDate()}`;\n  }\n}\nexport function formatDate(isoDateString) {\n  const months = ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'];\n  const days = ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'];\n  const date = new Date(isoDateString);\n  const currentDate = new Date();\n\n  // 날짜 요소 가져오기\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate();\n  const dayOfWeek = days[date.getDay()];\n  const hour = date.getHours();\n  const minute = date.getMinutes();\n\n  // 시간 설정\n  const timeString = hour === 3 ? minute === 0 ? '오후 12시' : `오후 12시 ${minute}분` : '';\n\n  // 현재 날짜와의 차이 계산\n  const weekDifference = getWeekDifference(currentDate, date);\n  const monthDifference = month - currentDate.getMonth();\n  const yearDifference = year - currentDate.getFullYear();\n\n  // 날짜 형식 결정\n  if (yearDifference === 0 && monthDifference === 0) {\n    if (weekDifference === 1) {\n      return `다음 주 ${day}일 ${dayOfWeek} ${timeString}`;\n    } else if (weekDifference === 2) {\n      return `다다음 주 ${day}일 ${dayOfWeek} ${timeString}`;\n    } else {\n      return `이번 달 ${day}일 ${dayOfWeek} ${timeString}`;\n    }\n  } else if (yearDifference === 0 && monthDifference === 1) {\n    return `다음 달 ${day}일 ${dayOfWeek} ${timeString}`;\n  } else {\n    // 기타 경우 (예: 년도가 다를 때)\n    return `${year}년 ${months[month]} ${day}일 ${dayOfWeek} ${timeString}`;\n  }\n}\nfunction getWeekDifference(date1, date2) {\n  const msPerWeek = 1000 * 60 * 60 * 24 * 7;\n  return Math.round((date2.getTime() - date1.getTime()) / msPerWeek);\n}\nexport function isTodayFromWeekday(weekday) {\n  const today = new Date();\n  const dayOfWeek = today.getDay(); // getDay()는 일요일을 0으로 반환합니다.\n\n  const dayMap = {\n    'SUN': 0,\n    'MON': 1,\n    'TUE': 2,\n    'WED': 3,\n    'THU': 4,\n    'FRI': 5,\n    'SAT': 6\n  };\n  return dayMap[weekday] === dayOfWeek;\n}\nexport function convertNumberToTimeFormat(time) {\n  const hours = Math.floor(time);\n  const minutes = Math.floor((time - hours) * 60);\n\n  // 시간과 분을 두 자리 수 형식으로 맞춤\n  const formattedHours = hours.toString().padStart(2, '0');\n  const formattedMinutes = minutes.toString().padStart(2, '0');\n  return `${formattedHours}:${formattedMinutes}`;\n}","map":{"version":3,"names":["timeSince","createdAt","now","Date","createdDate","seconds","Math","floor","getTime","minute","hour","day","getMonth","getDate","formatDate","isoDateString","months","days","date","currentDate","year","getFullYear","month","dayOfWeek","getDay","getHours","getMinutes","timeString","weekDifference","getWeekDifference","monthDifference","yearDifference","date1","date2","msPerWeek","round","isTodayFromWeekday","weekday","today","dayMap","convertNumberToTimeFormat","time","hours","minutes","formattedHours","toString","padStart","formattedMinutes"],"sources":["/Users/hano/dev/snu/iot/final-project/src/libs/timeSince.ts"],"sourcesContent":["export default function timeSince(createdAt: string): string {\n  const now = new Date()\n  const createdDate = new Date(createdAt)\n  const seconds = Math.floor((now.getTime() - createdDate.getTime()) / 1000)\n\n  const minute = 60\n  const hour = minute * 60\n  const day = hour * 24\n  //const month = day * 30 // 간략하게 한 달을 30일로 간주합니다.\n\n  if (seconds < minute) {\n    return '방금 전'\n  } else if (seconds < hour) {\n    return `${Math.floor(seconds / minute)}분 전`\n  } else if (seconds < day) {\n    return `${Math.floor(seconds / hour)}시간 전`\n  } else if (seconds < day * 2) {\n    return '1일 전'\n  } else if (seconds < day * 3) {\n    return '2일 전'\n  } else {\n    return `${createdDate.getMonth() + 1}/${createdDate.getDate()}`\n  }\n}\n\nexport function formatDate(isoDateString: string): string {\n  const months = ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월']\n  const days = ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일']\n\n  const date = new Date(isoDateString)\n  const currentDate = new Date()\n\n  // 날짜 요소 가져오기\n  const year = date.getFullYear()\n  const month = date.getMonth()\n  const day = date.getDate()\n  const dayOfWeek = days[date.getDay()]\n  const hour = date.getHours()\n  const minute = date.getMinutes()\n\n  // 시간 설정\n  const timeString = hour === 3 ? (minute === 0 ? '오후 12시' : `오후 12시 ${minute}분`) : ''\n\n  // 현재 날짜와의 차이 계산\n  const weekDifference = getWeekDifference(currentDate, date)\n  const monthDifference = month - currentDate.getMonth()\n  const yearDifference = year - currentDate.getFullYear()\n\n  // 날짜 형식 결정\n  if (yearDifference === 0 && monthDifference === 0) {\n    if (weekDifference === 1) {\n      return `다음 주 ${day}일 ${dayOfWeek} ${timeString}`\n    } else if (weekDifference === 2) {\n      return `다다음 주 ${day}일 ${dayOfWeek} ${timeString}`\n    } else {\n      return `이번 달 ${day}일 ${dayOfWeek} ${timeString}`\n    }\n  } else if (yearDifference === 0 && monthDifference === 1) {\n    return `다음 달 ${day}일 ${dayOfWeek} ${timeString}`\n  } else {\n    // 기타 경우 (예: 년도가 다를 때)\n    return `${year}년 ${months[month]} ${day}일 ${dayOfWeek} ${timeString}`\n  }\n}\n\nfunction getWeekDifference(date1: Date, date2: Date): number {\n  const msPerWeek = 1000 * 60 * 60 * 24 * 7\n  return Math.round((date2.getTime() - date1.getTime()) / msPerWeek)\n}\n\nexport type Weekday = 'MON' | 'TUE' | 'WED' | 'THU' | 'FRI' | 'SAT' | 'SUN';\n\nexport function isTodayFromWeekday(weekday: Weekday): boolean {\n  const today = new Date()\n  const dayOfWeek = today.getDay() // getDay()는 일요일을 0으로 반환합니다.\n\n  const dayMap: { [key: string]: number } = { 'SUN': 0, 'MON': 1, 'TUE': 2, 'WED': 3, 'THU': 4, 'FRI': 5, 'SAT': 6 }\n\n  return dayMap[weekday] === dayOfWeek\n}\n\nexport function convertNumberToTimeFormat(time: number): string {\n  const hours = Math.floor(time)\n  const minutes = Math.floor((time - hours) * 60)\n\n  // 시간과 분을 두 자리 수 형식으로 맞춤\n  const formattedHours = hours.toString().padStart(2, '0')\n  const formattedMinutes = minutes.toString().padStart(2, '0')\n\n  return `${formattedHours}:${formattedMinutes}`\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
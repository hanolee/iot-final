{"ast":null,"code":"export const storeAccessToken = accessToken => {\n  localStorage.setItem('drat', accessToken);\n};\nexport const storeRefreshToken = refreshToken => {\n  localStorage.setItem('drrt', refreshToken);\n};\nexport const getAccessToken = () => {\n  const token = localStorage.getItem('drat') || 'default';\n  return token;\n};\nexport const getRefreshToken = () => {\n  const token = localStorage.getItem('drrt') || 'default';\n  return token;\n};\nexport const isUserLoggedIn = () => {\n  const token = getAccessToken();\n  const length = token.length > 30;\n  return !!token && length; // token이 존재하면 true, 아니면 false 반환\n};\nconst decodeJWT = accessToken => {\n  if (!accessToken) {\n    return null;\n  }\n  const tokenParts = accessToken.split('.');\n  if (tokenParts.length !== 3) {\n    throw new Error('Invalid JWT');\n  }\n  const encodedPayload = tokenParts[1];\n  const decodedPayload = atob(encodedPayload);\n  const payload = JSON.parse(decodedPayload);\n  return payload;\n};\nexport const getPhoneNumberHashed = () => {\n  const at = getAccessToken();\n  return decodeJWT(at);\n};\nconst extractExpirationTime = accessToken => {\n  try {\n    const payload = decodeJWT(accessToken);\n    if (payload && payload.exp) {\n      return payload.exp;\n    }\n  } catch (error) {\n    console.error('Error decoding JWT:', error);\n  }\n  return null;\n};\nexport const validateToken = token => {\n  const expiredtime = extractExpirationTime(token);\n  const currenttime = Date.now() / 1000;\n  if (expiredtime) return currenttime < expiredtime;else return false;\n};\nexport const validateCurrentAccessToken = () => {\n  const at = getAccessToken();\n  return validateToken(at);\n};\nexport const validateCurrentRefreshToken = () => {\n  const rt = getRefreshToken();\n  return validateToken(rt);\n};","map":{"version":3,"names":["storeAccessToken","accessToken","localStorage","setItem","storeRefreshToken","refreshToken","getAccessToken","token","getItem","getRefreshToken","isUserLoggedIn","length","decodeJWT","tokenParts","split","Error","encodedPayload","decodedPayload","atob","payload","JSON","parse","getPhoneNumberHashed","at","extractExpirationTime","exp","error","console","validateToken","expiredtime","currenttime","Date","now","validateCurrentAccessToken","validateCurrentRefreshToken","rt"],"sources":["/Users/hano/dev/snu/iot/iot-final/src/utils/jwt.ts"],"sourcesContent":["interface JWTTokenPayload {\n  exp: number;\n}\n\nexport const storeAccessToken = (accessToken: string) => {\n  localStorage.setItem('drat', accessToken)\n}\nexport const storeRefreshToken = (refreshToken: string) => {\n  localStorage.setItem('drrt', refreshToken)\n}\nexport const getAccessToken = () => {\n  const token = localStorage.getItem('drat') || 'default'\n  return token\n}\nexport const getRefreshToken = () => {\n  const token = localStorage.getItem('drrt') || 'default'\n  return token\n}\nexport const isUserLoggedIn = (): boolean => {\n  const token = getAccessToken()\n  const length = token.length > 30\n  return !!token && length // token이 존재하면 true, 아니면 false 반환\n}\nconst decodeJWT = (accessToken: string): JWTTokenPayload | null => {\n  if (!accessToken) {\n    return null\n  }\n  const tokenParts = accessToken.split('.')\n  if (tokenParts.length !== 3) {\n    throw new Error('Invalid JWT')\n  }\n\n  const encodedPayload = tokenParts[1]\n  const decodedPayload = atob(encodedPayload)\n\n  const payload: JWTTokenPayload = JSON.parse(decodedPayload)\n  return payload\n}\nexport const getPhoneNumberHashed = () => {\n  const at = getAccessToken()\n  return decodeJWT(at)\n}\n\nconst extractExpirationTime = (accessToken: string): number | null => {\n  try {\n    const payload = decodeJWT(accessToken)\n    if (payload && payload.exp) {\n      return payload.exp\n    }\n  } catch (error) {\n    console.error('Error decoding JWT:', error)\n  }\n\n  return null\n}\n\nexport const validateToken = (token: string) => {\n  const expiredtime = extractExpirationTime(token)\n  const currenttime = Date.now() / 1000\n  if (expiredtime)\n    return currenttime < expiredtime\n  else\n    return false\n}\nexport const validateCurrentAccessToken = () => {\n  const at = getAccessToken()\n  return validateToken(at)\n}\nexport const validateCurrentRefreshToken = () => {\n  const rt = getRefreshToken()\n  return validateToken(rt)\n}\n"],"mappings":"AAIA,OAAO,MAAMA,gBAAgB,GAAIC,WAAmB,IAAK;EACvDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEF,WAAW,CAAC;AAC3C,CAAC;AACD,OAAO,MAAMG,iBAAiB,GAAIC,YAAoB,IAAK;EACzDH,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEE,YAAY,CAAC;AAC5C,CAAC;AACD,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,MAAMC,KAAK,GAAGL,YAAY,CAACM,OAAO,CAAC,MAAM,CAAC,IAAI,SAAS;EACvD,OAAOD,KAAK;AACd,CAAC;AACD,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMF,KAAK,GAAGL,YAAY,CAACM,OAAO,CAAC,MAAM,CAAC,IAAI,SAAS;EACvD,OAAOD,KAAK;AACd,CAAC;AACD,OAAO,MAAMG,cAAc,GAAGA,CAAA,KAAe;EAC3C,MAAMH,KAAK,GAAGD,cAAc,CAAC,CAAC;EAC9B,MAAMK,MAAM,GAAGJ,KAAK,CAACI,MAAM,GAAG,EAAE;EAChC,OAAO,CAAC,CAACJ,KAAK,IAAII,MAAM,EAAC;AAC3B,CAAC;AACD,MAAMC,SAAS,GAAIX,WAAmB,IAA6B;EACjE,IAAI,CAACA,WAAW,EAAE;IAChB,OAAO,IAAI;EACb;EACA,MAAMY,UAAU,GAAGZ,WAAW,CAACa,KAAK,CAAC,GAAG,CAAC;EACzC,IAAID,UAAU,CAACF,MAAM,KAAK,CAAC,EAAE;IAC3B,MAAM,IAAII,KAAK,CAAC,aAAa,CAAC;EAChC;EAEA,MAAMC,cAAc,GAAGH,UAAU,CAAC,CAAC,CAAC;EACpC,MAAMI,cAAc,GAAGC,IAAI,CAACF,cAAc,CAAC;EAE3C,MAAMG,OAAwB,GAAGC,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC;EAC3D,OAAOE,OAAO;AAChB,CAAC;AACD,OAAO,MAAMG,oBAAoB,GAAGA,CAAA,KAAM;EACxC,MAAMC,EAAE,GAAGjB,cAAc,CAAC,CAAC;EAC3B,OAAOM,SAAS,CAACW,EAAE,CAAC;AACtB,CAAC;AAED,MAAMC,qBAAqB,GAAIvB,WAAmB,IAAoB;EACpE,IAAI;IACF,MAAMkB,OAAO,GAAGP,SAAS,CAACX,WAAW,CAAC;IACtC,IAAIkB,OAAO,IAAIA,OAAO,CAACM,GAAG,EAAE;MAC1B,OAAON,OAAO,CAACM,GAAG;IACpB;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;EAC7C;EAEA,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAME,aAAa,GAAIrB,KAAa,IAAK;EAC9C,MAAMsB,WAAW,GAAGL,qBAAqB,CAACjB,KAAK,CAAC;EAChD,MAAMuB,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;EACrC,IAAIH,WAAW,EACb,OAAOC,WAAW,GAAGD,WAAW,MAEhC,OAAO,KAAK;AAChB,CAAC;AACD,OAAO,MAAMI,0BAA0B,GAAGA,CAAA,KAAM;EAC9C,MAAMV,EAAE,GAAGjB,cAAc,CAAC,CAAC;EAC3B,OAAOsB,aAAa,CAACL,EAAE,CAAC;AAC1B,CAAC;AACD,OAAO,MAAMW,2BAA2B,GAAGA,CAAA,KAAM;EAC/C,MAAMC,EAAE,GAAG1B,eAAe,CAAC,CAAC;EAC5B,OAAOmB,aAAa,CAACO,EAAE,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
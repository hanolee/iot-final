{"ast":null,"code":"export default function timeSince(createdAt){const now=new Date();const createdDate=new Date(createdAt);const seconds=Math.floor((now.getTime()-createdDate.getTime())/1000);const minute=60;const hour=minute*60;const day=hour*24;//const month = day * 30 // 간략하게 한 달을 30일로 간주합니다.\nif(seconds<minute){return'방금 전';}else if(seconds<hour){return\"\".concat(Math.floor(seconds/minute),\"\\uBD84 \\uC804\");}else if(seconds<day){return\"\".concat(Math.floor(seconds/hour),\"\\uC2DC\\uAC04 \\uC804\");}else if(seconds<day*2){return'1일 전';}else if(seconds<day*3){return'2일 전';}else{return\"\".concat(createdDate.getMonth()+1,\"/\").concat(createdDate.getDate());}}export function formatDate(isoDateString){const months=['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월'];const days=['일요일','월요일','화요일','수요일','목요일','금요일','토요일'];const date=new Date(isoDateString);const currentDate=new Date();// 날짜 요소 가져오기\nconst year=date.getFullYear();const month=date.getMonth();const day=date.getDate();const dayOfWeek=days[date.getDay()];const hour=date.getHours();const minute=date.getMinutes();// 시간 설정\nconst timeString=hour===3?minute===0?'오후 12시':\"\\uC624\\uD6C4 12\\uC2DC \".concat(minute,\"\\uBD84\"):'';// 현재 날짜와의 차이 계산\nconst weekDifference=getWeekDifference(currentDate,date);const monthDifference=month-currentDate.getMonth();const yearDifference=year-currentDate.getFullYear();// 날짜 형식 결정\nif(yearDifference===0&&monthDifference===0){if(weekDifference===1){return\"\\uB2E4\\uC74C \\uC8FC \".concat(day,\"\\uC77C \").concat(dayOfWeek,\" \").concat(timeString);}else if(weekDifference===2){return\"\\uB2E4\\uB2E4\\uC74C \\uC8FC \".concat(day,\"\\uC77C \").concat(dayOfWeek,\" \").concat(timeString);}else{return\"\\uC774\\uBC88 \\uB2EC \".concat(day,\"\\uC77C \").concat(dayOfWeek,\" \").concat(timeString);}}else if(yearDifference===0&&monthDifference===1){return\"\\uB2E4\\uC74C \\uB2EC \".concat(day,\"\\uC77C \").concat(dayOfWeek,\" \").concat(timeString);}else{// 기타 경우 (예: 년도가 다를 때)\nreturn\"\".concat(year,\"\\uB144 \").concat(months[month],\" \").concat(day,\"\\uC77C \").concat(dayOfWeek,\" \").concat(timeString);}}function getWeekDifference(date1,date2){const msPerWeek=1000*60*60*24*7;return Math.round((date2.getTime()-date1.getTime())/msPerWeek);}export function isTodayFromWeekday(weekday){const today=new Date();const dayOfWeek=today.getDay();// getDay()는 일요일을 0으로 반환합니다.\nconst dayMap={'SUN':0,'MON':1,'TUE':2,'WED':3,'THU':4,'FRI':5,'SAT':6};return dayMap[weekday]===dayOfWeek;}export function convertNumberToTimeFormat(time){const hours=Math.floor(time);const minutes=Math.floor((time-hours)*60);// 시간과 분을 두 자리 수 형식으로 맞춤\nconst formattedHours=hours.toString().padStart(2,'0');const formattedMinutes=minutes.toString().padStart(2,'0');return\"\".concat(formattedHours,\":\").concat(formattedMinutes);}","map":{"version":3,"names":["timeSince","createdAt","now","Date","createdDate","seconds","Math","floor","getTime","minute","hour","day","concat","getMonth","getDate","formatDate","isoDateString","months","days","date","currentDate","year","getFullYear","month","dayOfWeek","getDay","getHours","getMinutes","timeString","weekDifference","getWeekDifference","monthDifference","yearDifference","date1","date2","msPerWeek","round","isTodayFromWeekday","weekday","today","dayMap","convertNumberToTimeFormat","time","hours","minutes","formattedHours","toString","padStart","formattedMinutes"],"sources":["/Users/hano/dev/snu/iot/iot-final/src/libs/timeSince.ts"],"sourcesContent":["export default function timeSince(createdAt: string): string {\n  const now = new Date()\n  const createdDate = new Date(createdAt)\n  const seconds = Math.floor((now.getTime() - createdDate.getTime()) / 1000)\n\n  const minute = 60\n  const hour = minute * 60\n  const day = hour * 24\n  //const month = day * 30 // 간략하게 한 달을 30일로 간주합니다.\n\n  if (seconds < minute) {\n    return '방금 전'\n  } else if (seconds < hour) {\n    return `${Math.floor(seconds / minute)}분 전`\n  } else if (seconds < day) {\n    return `${Math.floor(seconds / hour)}시간 전`\n  } else if (seconds < day * 2) {\n    return '1일 전'\n  } else if (seconds < day * 3) {\n    return '2일 전'\n  } else {\n    return `${createdDate.getMonth() + 1}/${createdDate.getDate()}`\n  }\n}\n\nexport function formatDate(isoDateString: string): string {\n  const months = ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월']\n  const days = ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일']\n\n  const date = new Date(isoDateString)\n  const currentDate = new Date()\n\n  // 날짜 요소 가져오기\n  const year = date.getFullYear()\n  const month = date.getMonth()\n  const day = date.getDate()\n  const dayOfWeek = days[date.getDay()]\n  const hour = date.getHours()\n  const minute = date.getMinutes()\n\n  // 시간 설정\n  const timeString = hour === 3 ? (minute === 0 ? '오후 12시' : `오후 12시 ${minute}분`) : ''\n\n  // 현재 날짜와의 차이 계산\n  const weekDifference = getWeekDifference(currentDate, date)\n  const monthDifference = month - currentDate.getMonth()\n  const yearDifference = year - currentDate.getFullYear()\n\n  // 날짜 형식 결정\n  if (yearDifference === 0 && monthDifference === 0) {\n    if (weekDifference === 1) {\n      return `다음 주 ${day}일 ${dayOfWeek} ${timeString}`\n    } else if (weekDifference === 2) {\n      return `다다음 주 ${day}일 ${dayOfWeek} ${timeString}`\n    } else {\n      return `이번 달 ${day}일 ${dayOfWeek} ${timeString}`\n    }\n  } else if (yearDifference === 0 && monthDifference === 1) {\n    return `다음 달 ${day}일 ${dayOfWeek} ${timeString}`\n  } else {\n    // 기타 경우 (예: 년도가 다를 때)\n    return `${year}년 ${months[month]} ${day}일 ${dayOfWeek} ${timeString}`\n  }\n}\n\nfunction getWeekDifference(date1: Date, date2: Date): number {\n  const msPerWeek = 1000 * 60 * 60 * 24 * 7\n  return Math.round((date2.getTime() - date1.getTime()) / msPerWeek)\n}\n\nexport type Weekday = 'MON' | 'TUE' | 'WED' | 'THU' | 'FRI' | 'SAT' | 'SUN';\n\nexport function isTodayFromWeekday(weekday: Weekday): boolean {\n  const today = new Date()\n  const dayOfWeek = today.getDay() // getDay()는 일요일을 0으로 반환합니다.\n\n  const dayMap: { [key: string]: number } = { 'SUN': 0, 'MON': 1, 'TUE': 2, 'WED': 3, 'THU': 4, 'FRI': 5, 'SAT': 6 }\n\n  return dayMap[weekday] === dayOfWeek\n}\n\nexport function convertNumberToTimeFormat(time: number): string {\n  const hours = Math.floor(time)\n  const minutes = Math.floor((time - hours) * 60)\n\n  // 시간과 분을 두 자리 수 형식으로 맞춤\n  const formattedHours = hours.toString().padStart(2, '0')\n  const formattedMinutes = minutes.toString().padStart(2, '0')\n\n  return `${formattedHours}:${formattedMinutes}`\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
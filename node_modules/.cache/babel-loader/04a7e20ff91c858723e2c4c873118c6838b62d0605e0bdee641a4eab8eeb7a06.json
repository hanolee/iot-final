{"ast":null,"code":"import { Methods, request } from '@/libs/request';\nimport { ROUTER } from '@/router';\nconst {\n  FESTIVAL_ADMIN\n} = ROUTER;\nexport const postCreateParticipator = async ({\n  festivalId,\n  name,\n  boothNumber,\n  description,\n  handledTea,\n  country,\n  tag\n}) => request({\n  url: `${FESTIVAL_ADMIN}/${festivalId}/participator`,\n  method: Methods.POST,\n  data: {\n    name,\n    boothNumber,\n    description,\n    handledTea,\n    country,\n    tag\n  }\n});","map":{"version":3,"names":["Methods","request","ROUTER","FESTIVAL_ADMIN","postCreateParticipator","festivalId","name","boothNumber","description","handledTea","country","tag","url","method","POST","data"],"sources":["/Users/hano/dev/daru/daru-admin/src/apis/festival/postCreateParticipator.ts"],"sourcesContent":["import { Methods, request } from '@/libs/request'\nimport { ROUTER } from '@/router'\n\nconst { FESTIVAL_ADMIN } = ROUTER\n\nexport type postParticipatorRequestType = {\n  festivalId: number;\n  name: string;\n  boothNumber: number;\n  description: string;\n  handledTea: string;\n  country: 'KR' | 'CN' | 'JP' | 'LK' | 'TW';\n  tag: string;\n  latitude: string;\n  longitude: string;\n}\n\nexport type postParticipatorResponseType = {\n  participatorId: number;\n  boothNumber: number;\n  name: string;\n  tag: string;\n}\n\nexport const postCreateParticipator = async({ festivalId, name, boothNumber, description, handledTea, country, tag }: postParticipatorRequestType) => request<postParticipatorResponseType>({\n  url: `${FESTIVAL_ADMIN}/${festivalId}/participator`,\n  method: Methods.POST,\n  data: { name, boothNumber, description, handledTea, country, tag }\n})\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,OAAO,QAAQ,gBAAgB;AACjD,SAASC,MAAM,QAAQ,UAAU;AAEjC,MAAM;EAAEC;AAAe,CAAC,GAAGD,MAAM;AAqBjC,OAAO,MAAME,sBAAsB,GAAG,MAAAA,CAAM;EAAEC,UAAU;EAAEC,IAAI;EAAEC,WAAW;EAAEC,WAAW;EAAEC,UAAU;EAAEC,OAAO;EAAEC;AAAiC,CAAC,KAAKV,OAAO,CAA+B;EAC1LW,GAAG,EAAG,GAAET,cAAe,IAAGE,UAAW,eAAc;EACnDQ,MAAM,EAAEb,OAAO,CAACc,IAAI;EACpBC,IAAI,EAAE;IAAET,IAAI;IAAEC,WAAW;IAAEC,WAAW;IAAEC,UAAU;IAAEC,OAAO;IAAEC;EAAI;AACnE,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}